import telebot
import humanize
from telebot.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup
import pymongo
import datetime
from bson.objectid import ObjectId

mongo_client = pymongo.MongoClient("mongodb://localhost:27017/")
database = mongo_client["task_manager"]
tasks_db = database["user_tasks"]

bot_token = '7788966144:AAH3S95XEOPDOCj7Cv9KGd5oDk4pvFPmqoM'
bot_instance = telebot.TeleBot(bot_token)
user_cache = {}

def generate_main_buttons():
    menu = ReplyKeyboardMarkup(row_width=2, resize_keyboard=True, one_time_keyboard=False)
    menu.add(
        KeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É"),
        KeyboardButton("üìã –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–¥–∞—á"),
        KeyboardButton("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"),
        KeyboardButton("üîô –ù–∞–∑–∞–¥")
    )
    return menu

@bot_instance.message_handler(commands=['start'])
def start(message):
    bot_instance.reply_to(
        message,
        "üéâ SkatBot –Ω–∞—Å—Ç—Ä–æ–µ–Ω! üéâ\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        parse_mode="Markdown",
        reply_markup=generate_main_buttons()
    )

@bot_instance.message_handler(func=lambda msg: True)
def handle_menu(msg):
    if msg.text in ["‚ûï –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É", "/create"]:
        bot_instance.reply_to(msg, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:", parse_mode="Markdown")
        user_cache[msg.chat.id] = {}
        bot_instance.register_next_step_handler(msg, get_task_title)
    elif msg.text in ["üìã –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–¥–∞—á", "/view"]:
        bot_instance.send_message(msg.chat.id, "–í–æ—Ç –≤–∞—à–∏ –∑–∞–¥–∞—á–∏:", parse_mode="Markdown")
        display_tasks(msg)
    elif msg.text == "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è":
        send_info(msg)
    elif msg.text == "üîô –ù–∞–∑–∞–¥":
        go_back(msg)
    else:
        bot_instance.reply_to(msg, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä.", reply_markup=generate_main_buttons())

@bot_instance.message_handler(commands=['create'])
def create_task(msg):
    chat_id = msg.chat.id
    user_cache[chat_id] = {}
    bot_instance.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:")
    bot_instance.register_next_step_handler(msg, get_task_title)

def get_task_title(msg):
    chat_id = msg.chat.id
    if msg.text == "üîô –ù–∞–∑–∞–¥":
        go_back(msg)
        return
    user_cache[chat_id]['title'] = msg.text
    bot_instance.send_message(chat_id, "–î–æ–±–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏.")
    bot_instance.register_next_step_handler(msg, get_task_description)

def get_task_description(msg):
    chat_id = msg.chat.id
    if msg.text == "üîô –ù–∞–∑–∞–¥":
        go_back(msg)
        return
    user_cache[chat_id]['description'] = msg.text
    bot_instance.send_message(chat_id, "–£–∫–∞–∂–∏—Ç–µ –¥–µ–¥–ª–∞–π–Ω: –¥–¥ –º–º –≥–≥–≥–≥ (—á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª)")
    bot_instance.register_next_step_handler(msg, get_task_deadline)

def get_task_deadline(msg):
    chat_id = msg.chat.id
    if msg.text == "üîô –ù–∞–∑–∞–¥":
        go_back(msg)
        return
    try:
        deadline_date = datetime.datetime.strptime(msg.text, '%d %m %Y')
        user_cache[chat_id]['deadline'] = deadline_date
        task_data = {
            'user_id': msg.from_user.id,
            'chat_id': chat_id,
            'title': user_cache[chat_id]['title'],
            'description': user_cache[chat_id]['description'],
            'deadline': user_cache[chat_id]['deadline'],
            'status': False
        }
        tasks_db.insert_one(task_data)
        bot_instance.send_message(chat_id, "–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
    except ValueError:
        bot_instance.send_message(chat_id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–¥ –º–º –≥–≥–≥–≥ (—á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª).")
    finally:
        user_cache.pop(chat_id, None)

def display_tasks(msg):
    chat_id = msg.chat.id
    tasks = tasks_db.find({'chat_id': chat_id})
    if tasks_db.count_documents({'chat_id': chat_id}) == 0:
        bot_instance.send_message(chat_id, "–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–¥–∞—á.")
    else:
        for task in tasks:
            keyboard = InlineKeyboardMarkup()
            task_id = task["_id"]
            title = task['title']
            description = task['description']
            status = task['status']
            deadline = task['deadline']
            response = (
                f"üìå *{title}*\n"
                f"üìù {description}\n"
                f"‚è≥ {humanize.naturalday(deadline).capitalize()}\n"
            )
            if not status:
                response += "‚ùå –ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ\n"
                button_done = InlineKeyboardButton(text="–í—ã–ø–æ–ª–Ω–µ–Ω–æ", callback_data=f'done_{task_id}')
                button_edit = InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å", callback_data=f'edit_{task_id}')
                button_delete = InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å", callback_data=f'delete_{task_id}')
                keyboard.add(button_done, button_edit, button_delete)
            else:
                response += "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ!\n"
                button_undone = InlineKeyboardButton(text="–ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ", callback_data=f'undone_{task_id}')
                button_edit = InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å", callback_data=f'edit_{task_id}')
                button_delete = InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å", callback_data=f'delete_{task_id}')
                keyboard.add(button_undone, button_edit, button_delete)
            bot_instance.send_message(chat_id, response, parse_mode="Markdown", reply_markup=keyboard)

@bot_instance.callback_query_handler(func=lambda call: call.data.startswith('done_'))
def completed(call):
    message = call.message
    task_id = call.data.split("_")[1]
    tasks_db.find_one_and_update({"_id": ObjectId(task_id)}, {'$set': {"status": True}})
    bot_instance.answer_callback_query(call.id, "–ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!")
    text = message.text[:-15]
    bot_instance.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text=text + "\n‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ!",
        parse_mode="Markdown",
    )
@bot_instance.callback_query_handler(func=lambda call: call.data.startswith('undone_'))
def uncompleted(call):
    message = call.message
    task_id = call.data.split("_")[1]
    tasks_db.find_one_and_update({"_id": ObjectId(task_id)}, {'$set': {"status": False}})
    bot_instance.answer_callback_query(call.id, "–ó–∞–¥–∞—á–∞ –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–∞!")
    text = message.text[:-13]
    bot_instance.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text=text + "\n‚ùå –ù–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–æ!",
        parse_mode="Markdown",
    )
@bot_instance.callback_query_handler(func=lambda call: call.data.startswith('edit_'))
def edit_task(call):
    task_id = call.data.split("_")[1]
    keyboard = InlineKeyboardMarkup()
    button_name = InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ", callback_data=f'name_{task_id}')
    button_desc = InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ", callback_data=f'desc_{task_id}')
    button_deadline = InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ä–æ–∫", callback_data=f'deadline_{task_id}')
    keyboard.add(button_name, button_desc, button_deadline)
    bot_instance.send_message(call.message.chat.id, "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?", reply_markup=keyboard)

@bot_instance.callback_query_handler(func=lambda call: call.data.startswith('name_'))
def update_title(call):
    task_id = call.data.split("_")[1]
    chat_id = call.message.chat.id
    bot_instance.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:")
    bot_instance.register_next_step_handler(call.message, lambda msg: update_field(msg, task_id, 'title'))
@bot_instance.callback_query_handler(func=lambda call: call.data.startswith('desc_'))
def update_description(call):
    task_id = call.data.split("_")[1]
    chat_id = call.message.chat.id
    bot_instance.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:")
    # –ü–µ—Ä–µ–¥–∞–µ–º –æ–±—ä–µ–∫—Ç Message –∏–∑ CallbackQuery
    bot_instance.register_next_step_handler(call.message, lambda msg: update_field(msg, task_id, 'description'))
@bot_instance.callback_query_handler(func=lambda call: call.data.startswith('deadline_'))
def update_deadline(call):
    task_id = call.data.split("_")[1]
    chat_id = call.message.chat.id
    bot_instance.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: –¥–¥ –º–º –≥–≥–≥–≥ (—á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª)")
    bot_instance.register_next_step_handler(call.message, lambda msg: update_field(msg, task_id, 'deadline'))

def update_field(msg, task_id, field):
    new_value = msg.text
    tasks_db.find_one_and_update({"_id": ObjectId(task_id)}, {'$set': {field: new_value}})
    bot_instance.reply_to(msg, f"–ü–æ–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {new_value}")


@bot_instance.callback_query_handler(func=lambda call: call.data.startswith('delete_'))
def remove_task(call):
    task_id = call.data.split("_")[1]
    tasks_db.find_one_and_delete({"_id": ObjectId(task_id)})
    bot_instance.answer_callback_query(call.id, "–ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞!")
    bot_instance.delete_message(call.message.chat.id, call.message.message_id)

def send_info(msg):
    bot_instance.send_message(
        msg.chat.id,
        "–° –ø–æ–º–æ—â—å—é SkatBot –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∏ —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–≤–æ–∏–º–∏ –∑–∞–¥–∞—á–∞–º–∏ –ø—Ä—è–º–æ —á–µ—Ä–µ–∑ Telegram.\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –ø—Ä–æ—Å—Ç—ã–µ –∑–∞–¥–∞—á–∏, –∏—Å–ø–æ–ª—å–∑—É—è –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —è–∑—ã–∫, –∫ –ø—Ä–∏–º–µ—Ä—É: "
        "\"–ø–æ–∑–≤–æ–Ω–∏—Ç—å –î–∂–æ–Ω—É\", \"–ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ—á—Ç—É –∑–∞–≤—Ç—Ä–∞ \", \"–æ–ø–ª–∞—Ç–∏—Ç—å —Å—á–µ—Ç–∞ 1 —á–∏—Å–ª–∞ –∫–∞–∂–¥–æ–≥–æ –º–µ—Å—è—Ü–∞\" –∏ —Ç.–¥.\n\n"
        "–ï—Å–ª–∏ –≤–∞–º –Ω—É–∂–µ–Ω –ø—Ä–æ—Å—Ç–æ–π, –Ω–æ –º–æ—â–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ SkatBot.\n\n"
        "–ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –∏—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ –Ω–∞ GitHub: [SkatBot GitHub](https://github.com/ArtyomProkopets/TGBot_DMLab)",
        parse_mode="Markdown"

    )

def go_back(msg):
    bot_instance.send_message(msg.chat.id, "–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=generate_main_buttons())

bot_instance.polling(none_stop=True)